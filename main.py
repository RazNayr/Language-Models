from necessities import Model
from necessities import Version
import necessities
import vanilla
import laplace
import unk
import interpolation

import string
import re
import time



# Function to return a dictionary of models whose keys are tuples which denote the version and type of the model.
# The value of each key is the model itself.
def buildModelDictionary():
    models = {}

    # Vanilla Models
    models[(Version.Vanilla, Model.Unigram)] = van_unigram
    models[(Version.Vanilla, Model.Bigram)] = van_bigram
    models[(Version.Vanilla, Model.Trigram)] = van_trigram
    models[(Version.Vanilla, Model.Interpolation)] = van_interpolation

    # Laplace Models
    models[(Version.Laplace, Model.Unigram)] = lap_unigram
    models[(Version.Laplace, Model.Bigram)] = lap_bigram
    models[(Version.Laplace, Model.Trigram)] = lap_trigram
    models[(Version.Laplace, Model.Interpolation)] = lap_interpolation

    # Unk Models
    models[(Version.Unk, Model.Unigram)] = unk_unigram
    models[(Version.Unk, Model.Bigram)] = unk_bigram
    models[(Version.Unk, Model.Trigram)] = unk_trigram
    models[(Version.Unk, Model.Interpolation)] = unk_interpolation

    return models


# Function to pre-process the text from user input
def cleanText(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\w*\d\w*', '', text)
    text = " ".join(text.split())
    return text


# Function to display the main menu for the user.
# This menu allows the user to choose the model he wishes to test.
# After choosing the model, the testModel() function is called to test the chosen model.
# After finishing testing of the specific model, the user is given the choice to test another model or quit.
def menu():

    finished_testing = False

    print("------------------------- Building a Language Model -------------------------\n")

    while not finished_testing:
        while True:
            print("Choose version of model")
            print("1. Vanilla")
            print("2. Laplace")
            print("3. Unk")
            choice = int(input("Input: "))
            print("\n-----------------------------------------------------------------------------")

            if choice == 1:
                model_version = Version.Vanilla
                break
            elif choice == 2:
                model_version = Version.Laplace
                break
            elif choice == 3:
                model_version = Version.Unk
                break
            else:
                print("WARNING - Invalid input\nPlease try again.\n")
                continue

        while True:
            print("Choose model")
            print("1. Unigram")
            print("2. Bigram")
            print("3. Trigram")
            print("4. Interpolation")
            choice = int(input("Input: "))
            print("\n-----------------------------------------------------------------------------")

            if choice == 1:
                model_type = Model.Unigram
                break
            elif choice == 2:
                model_type = Model.Bigram
                break
            elif choice == 3:
                model_type = Model.Trigram
                break
            elif choice == 4:
                model_type = Model.Interpolation
                break
            else:
                print("WARNING - Invalid input\nPlease try again.\n")
                continue

        testModel(model_version, model_type)

        while True:
            print("Do you wish to test another model?")
            print("1. Yes")
            print("2. No")
            choice = int(input("Input: "))
            print("\n-----------------------------------------------------------------------------")

            if choice == 1:
                break
            elif choice == 2:
                finished_testing = True
                break
            else:
                print("WARNING - Invalid input\nPlease try again.\n")
                continue


# Function to test the model chosen by the user from the main menu.
# The user can choose the test method to be used or to stop testing the chosen model.
# If text generation is chosen, the user is instructed to input a sequence of 1 or more words.
# # After this is done, the generated text is shown to the user and is redirected back to the test method choice menu.
# If probability calculation is chosen, the user is redirected to a menu.
# # The user has the choice to test using user input by inputting a sequence and calculating its probability or by using
# # the test set and calculating the percentage of sentences that have zero probability of being generated by the model.
# # If the test set option is chosen, the percentage of the chosen model is shown along with the percentages found for
# # any models which have been tested before.
# If the user chooses to stop testing the current model, the user is returned back to the main menu.
def testModel(model_version, model_type):

    finished_testing = False

    while not finished_testing:
        print("Choose test method")
        print("1. Generate the rest of sequence")
        print("2. Calculate probability of sequence")
        print("3. Stop testing current model")
        choice = int(input("Input: "))
        print("\n-----------------------------------------------------------------------------")

        if choice == 1:

            while True:
                print("Input sequence of words (1 or more)")
                sequence = input("Input: ")
                print("\n-----------------------------------------------------------------------------")
                sequence = cleanText(sequence)

                if len(sequence.split()) >= 1:
                    break
                else:
                    print("WARNING - No words inputted\nPlease try again.\n")
                    continue

            generated_text = models[(model_version, model_type)].generateText(sequence)

            if generated_text is not None:
                generated_text = generated_text.replace('<s> ', '').replace(' </s>', '.')
                print("\n----------------------- "+model_version.name+"-"+model_type.name+" Generated Text -----------------------")
                print("Sequence Given : " + sequence)
                print("Generated Text : " + generated_text)
                print("-----------------------------------------------------------------------------\n")
            else:
                print("\n------------------ "+model_version.name+"-"+model_type.name+" Text Generation Warning -------------------")
                print("Unknown sequence/word inputted!")
                print("-----------------------------------------------------------------------------\n")

        elif choice == 2:

            while True:
                print("Do you wish to test using test set or by user input?")
                print("1. Test set (find percentage of sequences with 0 probability)")
                print("2. User Input (find probability of a specific sequence)")
                choice = int(input("Input: "))
                print("\n-----------------------------------------------------------------------------")

                if choice == 1:
                    chose_test_set = True
                    test_set = open("lexicon/test.lex.txt", "r", encoding="utf8")
                    zero_probability_count = 0
                    num_test_sequences = 0

                    for sequence in test_set:
                        num_test_sequences += 1
                        probability = models[(model_version, model_type)].findProbability(sequence, chose_test_set)

                        if probability == 0:
                            zero_probability_count += 1

                    zero_probability_percentage = (zero_probability_count / num_test_sequences) * 100
                    model_percentage_history[(model_version.name, model_type.name)] = round(zero_probability_percentage, 2)

                    print("\nModel percentage history (percentage of sequences which have zero probability)\n")
                    for model in model_percentage_history:
                        print(model[0]+"-"+model[1]+": " + str(model_percentage_history[model]) + "%")
                    print("\n-----------------------------------------------------------------------------")

                    test_set.close()
                    break

                elif choice == 2:
                    chose_test_set = False
                    while True:
                        print("Input sequence of words (1 or more)")
                        sequence = input("Input: ")
                        print("\n-----------------------------------------------------------------------------")
                        sequence = cleanText(sequence)

                        if len(sequence.split()) >= 1:
                            break
                        else:
                            print("WARNING - No words inputted\nPlease try again.\n")
                            continue

                    probability = models[(model_version, model_type)].findProbability(sequence, chose_test_set)

                    print(
                        "\n------------------- " + model_version.name + "-" + model_type.name + " Sequence Probability --------------------")
                    print("Sequence : " + sequence)
                    print("Probability : " + str(probability))
                    print("-----------------------------------------------------------------------------\n")

                    break

                else:
                    print("WARNING - Invalid input\nPlease try again.\n")
                    continue

        elif choice == 3:
            finished_testing = True

        else:
            print("WARNING - Invalid input\nPlease try again.\n")
            continue


main_start_time = time.time()

lexicon = open("lexicon/training.lex.txt", "r", encoding="utf8")
vocab_size, unigram_counts, bigram_counts, trigram_counts = necessities.getNecessities(lexicon)

print("\n------------------------- Generating Language Models -------------------------\n")

# Generating Vanilla-Unigram Model
start_time = time.time()
van_unigram = vanilla.UnigramModel(unigram_counts).generateModel()
print("--- %s seconds to generate Vanilla Unigram ---" % round(time.time() - start_time, 2))

# Generating Vanilla-Bigram Model
start_time = time.time()
van_bigram = vanilla.BigramModel(bigram_counts).generateModel()
print("--- %s seconds to generate Vanilla Bigram ---" % round(time.time() - start_time, 2))

# Generating Vanilla-Trigram Model
start_time = time.time()
van_trigram = vanilla.TrigramModel(trigram_counts).generateModel()
print("--- %s seconds to generate Vanilla Trigram ---\n" % round(time.time() - start_time, 2))

# Generating Laplace-Unigram Model
start_time = time.time()
lap_unigram = laplace.UnigramModel(unigram_counts, vocab_size).generateModel()
print("--- %s seconds to generate Laplace Unigram ---" % round(time.time() - start_time, 2))

# Generating Laplace-Bigram Model
start_time = time.time()
lap_bigram = laplace.BigramModel(unigram_counts, bigram_counts, vocab_size).generateModel()
print("--- %s seconds to generate Laplace Bigram ---" % round(time.time() - start_time, 2))

# Generating Laplace-Trigram Model
start_time = time.time()
lap_trigram = laplace.TrigramModel(unigram_counts, bigram_counts, trigram_counts, vocab_size).generateModel()
print("--- %s seconds to generate Laplace Trigram ---\n" % round(time.time() - start_time, 2))

# Generating UNK-Unigram Model
start_time = time.time()
unk_unigram = unk.UnigramModel(unigram_counts, lexicon).generateModel()
print("--- %s seconds to generate UNK Unigram ---" % round(time.time() - start_time, 2))

# Generating UNK-Bigram Model
start_time = time.time()
unk_bigram = unk.BigramModel(unigram_counts, lexicon).generateModel()
print("--- %s seconds to generate UNK Bigram ---" % round(time.time() - start_time, 2))

# Generating UNK-Trigram Model
start_time = time.time()
unk_trigram = unk.TrigramModel(unigram_counts, lexicon).generateModel()
print("--- %s seconds to generate UNK Trigram ---\n" % round(time.time() - start_time, 2))

# Generating Vanilla-Interpolation Model
start_time = time.time()
van_interpolation = interpolation.LinearInterpolation(Version.Vanilla, vocab_size, van_unigram.getModel(), van_bigram.getModel(), van_trigram.getModel(), unigram_counts, bigram_counts)
print("--- %s seconds to generate Vanilla Interpolation ---" % round(time.time() - start_time, 2))

# Generating Laplace-Interpolation Model
start_time = time.time()
lap_interpolation = interpolation.LinearInterpolation(Version.Laplace, vocab_size, lap_unigram.getModel(), lap_bigram.getModel(), lap_trigram.getModel(), unigram_counts, bigram_counts)
print("--- %s seconds to generate Laplace Interpolation ---" % round(time.time() - start_time, 2))

# Generating UNK-Interpolation Model
start_time = time.time()
unk_interpolation = interpolation.LinearInterpolation(Version.Unk, vocab_size, unk_unigram.getModel(), unk_bigram.getModel(), unk_trigram.getModel(), unigram_counts, bigram_counts)
print("--- %s seconds to generate UNK Interpolation ---\n" % round(time.time() - start_time, 2))

# Dictionary of models whose keys are tuples which denote the version and type of the model as enumeration values.
# The value of each key is the model itself.
models = buildModelDictionary()

# Dictionary of models whose keys are tuples which denote the version and type of the model as strings.
# The value of each key is the percentage of sentences with zero probability to be generated by the model.
model_percentage_history = {}

lexicon.close()
print("\n--- %s seconds to generate all models and necessities ---\n" % round(time.time() - main_start_time, 2))

menu()
